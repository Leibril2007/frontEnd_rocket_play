const niveles = [
    { id: 1, objetivo: "üò∫", opciones: ["üò∫", "üê∂", "üêµ", "ü¶ä", "üêØ", "üê∏"] },
    { id: 2, objetivo: "üéà", opciones: ["üéÇ", "üéâ", "üéà", "üéÅ", "üéÉ", "üéä"] },
    { id: 3, objetivo: "üçï", opciones: ["üå≠", "üçî", "üçï", "üçü", "ü•™", "üçó"] },
    { id: 4, objetivo: "üåµ", opciones: ["üå≥", "üå≤", "üå¥", "üåµ", "üå∫", "üåæ"] },
    { id: 5, objetivo: "üöÄ", opciones: ["üöÅ", "‚úàÔ∏è", "üöÄ", "üöÇ", "üöó", "üõ∏"] },
    { id: 6, objetivo: "‚öΩ", opciones: ["üèÄ", "üèà", "‚öæ", "üéæ", "üèê", "‚öΩ"] },
    { id: 7, objetivo: "üêô", opciones: ["ü¶ë", "ü¶ê", "üê†", "üê°", "üêô", "ü¶Ä"] },
    { id: 8, objetivo: "üß†", opciones: ["ü´Ä", "üß†", "ü¶¥", "ü¶∑", "üëÅÔ∏è", "üëÇ"] },
    { id: 9, objetivo: "üëë", opciones: ["üé©", "üß¢", "üëí", "üëë", "ü™ñ", "ü•Ω"] },
    { id: 10, objetivo: "üßÉ", opciones: ["ü•§", "üßÉ", "‚òï", "üçµ", "üçº", "üç∂"] }
  ];
  
  const tiempoRaw = localStorage.getItem("tiempoBd");
  const nivelesRaw = localStorage.getItem("nivelesBd");
  
  let tiempoPorNivel = 15;
  let nivelesSeleccionados = [];
  
  if (tiempoRaw) {
    try {
      const tiempoParseado = JSON.parse(tiempoRaw);
      const tiempoNum = parseInt(tiempoParseado);
      if (!isNaN(tiempoNum) && tiempoNum > 0) {
        tiempoPorNivel = tiempoNum;
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è Error al leer tiempoBd:", e);
    }
  }
  
  if (nivelesRaw) {
    try {
      let arr;
      if (nivelesRaw.startsWith("[")) {
        arr = JSON.parse(nivelesRaw);
      } else {
        arr = nivelesRaw.split(',').map(n => parseInt(n.trim()));
      }
  
      nivelesSeleccionados = arr.filter(n => !isNaN(n) && n > 0 && n <= 10);
    } catch (e) {
      console.warn("‚ö†Ô∏è Error al leer nivelesBd:", e);
      nivelesSeleccionados = [];
    }
  }
  
  // Si no hay niveles v√°lidos, usar todos por defecto
  if (nivelesSeleccionados.length === 0) {
    nivelesSeleccionados = [1,2,3,4,5,6,7,8,9,10];
  }
  
  // Nivel actual seg√∫n √≠ndice en nivelesSeleccionados
  let nivelIndex = 0;
  let nivel = nivelesSeleccionados[nivelIndex];   

  let aciertos = 0;
  let fallos = 0;
  let vidas = 3;
  let inicioTiempo = Date.now();
  let tiempoRestante = tiempoPorNivel;
  let temporizador;
  
// Nivel completo
function cargarNivel() {
  if (vidas <= 0) return;

  const nivelActual = niveles.find(n => n.id === nivel);
  if (!nivelActual) {
    console.error("Nivel no encontrado:", nivel);
    mostrarResumen();
    return;
  }

  document.getElementById("nivel").textContent = nivelActual.id;
  document.getElementById("emoji-target").textContent = nivelActual.objetivo;
  actualizarVidas();

  const contenedor = document.getElementById("emoji-options");
  contenedor.innerHTML = "";

  nivelActual.opciones.forEach(e => {
    const span = document.createElement("span");
    span.className = "emoji";
    span.textContent = e;
    span.onclick = () => {
      clearInterval(temporizador);
      if (e === nivelActual.objetivo) {
        aciertos++;
        document.getElementById("next-level").style.display = "inline";
      } else {
        procesarFallo();
      }
    };
    contenedor.appendChild(span);
  });

  document.getElementById("next-level").style.display = "none";
  iniciarTemporizador();
}
  
  function actualizarVidas() {
    const vidasDiv = document.getElementById("vidas");
    if (vidasDiv) {
      vidasDiv.innerHTML = `Vidas: ${"‚ù§Ô∏è".repeat(vidas)}${"ü§ç".repeat(3 - vidas)}`;
    }
  }
  
  function procesarFallo() {
    fallos++;
    vidas--;
    actualizarVidas();
    if (vidas <= 0) {
      clearInterval(temporizador);
      mostrarResumen();
    } else {
      document.getElementById("next-level").style.display = "inline";
    }
  }
  
  function iniciarTemporizador() {
    tiempoRestante = tiempoPorNivel;
  
    let tiempoDisplay = document.getElementById("tiempo-restante");
    if (!tiempoDisplay) {
      tiempoDisplay = document.createElement("p");
      tiempoDisplay.id = "tiempo-restante";
      document.getElementById("game-container").appendChild(tiempoDisplay);
    }
  
    tiempoDisplay.textContent = `‚è± Tiempo: ${tiempoRestante}s`;
  
    temporizador = setInterval(() => {
      tiempoRestante--;
      tiempoDisplay.textContent = `‚è± Tiempo: ${tiempoRestante}s`;
      if (tiempoRestante <= 0) {
        clearInterval(temporizador);
        procesarFallo();
        tiempoDisplay.textContent = "‚è± Tiempo agotado!";
      }
    }, 1000);
  }
  
  document.getElementById("next-level").onclick = () => {
    const tiempoUI = document.getElementById("tiempo-restante");
    if (tiempoUI) tiempoUI.remove();
  
    nivelIndex++;
    if (nivelIndex >= nivelesSeleccionados.length || vidas <= 0) {
      mostrarResumen();
    } else {
      nivel = nivelesSeleccionados[nivelIndex];
      cargarNivel();
    }
  };
  
  function mostrarResumen() {
    const tiempoTotal = Math.floor((Date.now() - inicioTiempo) / 1000);
    document.getElementById("game-container").style.display = "none";
    document.getElementById("summary").style.display = "block";
    document.getElementById("aciertos").textContent = aciertos;
    document.getElementById("fallos").textContent = fallos;
    document.getElementById("tiempo-total").textContent = tiempoTotal;
  
    const puntuacion = aciertos * 10 - fallos * 5 - tiempoTotal;
    let ranking;
  
    if (puntuacion >= 70) {
      ranking = "ü•á Oro ‚Äì ¬°Emoji Maestro!";
    } else if (puntuacion >= 40) {
      ranking = "ü•à Plata ‚Äì ¬°Buen trabajo!";
    } else if (puntuacion >= 20) {
      ranking = "ü•â Bronce ‚Äì ¬°Sigue practicando!";
    } else {
      ranking = "üòø Sin medalla ‚Äì ¬°No te rindas!";
    }
  
    document.getElementById("ranking").textContent = ranking;
  
    document.getElementById("descargar-resumen").onclick = () => {
      const resumen = `
  Resumen de Partida ‚Äì Encuentra el Emoji
  ---------------------------------------
  ‚úÖ Aciertos: ${aciertos}
  ‚ùå Fallos: ${fallos}
  ‚è± Tiempo total: ${tiempoTotal} segundos
  üèÜ Ranking: ${ranking}
  `;
      const blob = new Blob([resumen], { type: "text/plain" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "resumen_partida.txt";
      link.click();
    };
  
    // Enviar partida al backend (sin nombre)
    fetch("https://backend-rocket-k6wn.onrender.com/api/partidas", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        aciertos: aciertos,
        fallos: fallos,
        tiempo_total: tiempoTotal,
        ranking: ranking
      })
    })
    .then(res => res.json())
    .then(data => console.log("‚úÖ Partida enviada:", data))
    .catch(err => console.error("‚ùå Error al enviar partida:", err));
  }
  
  cargarNivel();
  